@page "/wordle"
@using CameronAnderson.Wordle
@using System.Threading

<h1>Wordle Solver</h1>
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left"
             Gap="0rem" Wrap="FlexWrap.Wrap" Style="max-width:14rem; margin:auto;">
    @foreach (var letter in Words.Letters)
    {
        <LetterComponent Letter=@letter />
    }
</RadzenStack>
<br />
<br />

<KeyboardComponent Words=@Words />

<br />
<RadzenButton Click=@(args => Solve()) Text="Solve" ButtonStyle="ButtonStyle.Primary" />
<br />

<RadzenDataGrid @ref="solutionsGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="10" AllowSorting="true"
                Data="@PossibleSolutions" TItem="string">
    <Columns>
        <RadzenDataGridColumn TItem="string" Property=value Title="Solutions" />
    </Columns>
</RadzenDataGrid>

@code {
    protected override async void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        using var periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(150));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    RadzenDataGrid<string> solutionsGrid;
    private List<string> PossibleSolutions = new List<string>();
    private Words Words = new Words();

    private void Solve()
    {
        PossibleSolutions = Solver.Solve(Words.Letters);
    }
}
